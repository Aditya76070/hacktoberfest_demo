 
 
 //USING DFS
    /*
    private:
        void dfs(int i,vector<int>&vis,vector<int> adj[] , stack<int>&st)
        {
            vis[i]=1;
            
            for(auto x:adj[i])
            {
                if(!vis[x])
                    dfs(x,vis,adj,st);
            }
            
            st.push(i);
        }
    
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int> st;
	    vector<int> vis(V,0);
	    vector<int> ans;
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	            dfs(i,vis,adj,st);
	    }
	    
	    while(!st.empty())
	    {
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	    
	    */
	    
	    // USING BFS - > KAHN'S ALGORITHM
	  public:
	 vector<int> topoSort(int V, vector<int> adj[]) {
	     
	     queue<int> q;
	     vector<int> indegree(V,0);
	     vector<int> ans;
	     
	     //mark the indegrees 
	     for(int i=0;i<V;i++)
	     {
	         for(auto x:adj[i])
	         {
	             indegree[x]++;
	         }
	     }
	     
	     // initially
	     // push the elements having indegree 0
	     for(int i=0;i<V;i++)
	     {
	         if(indegree[i]==0)
	            q.push(i);
	     }
	     
	     while(!q.empty())
	     {
	         int p = q.front();
	         q.pop();
	         ans.push_back(p);
	         
	         for(auto x:adj[p])
	         {
	             indegree[x]--;
	             if(indegree[x]==0)q.push(x);
	         }
	     }
	     
	     return ans;
