public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // distance vector with all infinite
        vector<int> distance(V);
        for(int i=0;i<V;i++)distance[i]=1e9;
        
        // MIN HEAP
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        // priority queue will store the distance and node
        // sorted on based of distance 
        // here the distance is the distance from source to that node
        
        // mark the distance of source to sources as 0
        distance[S]=0;
        pq.push({0,S});
        
        while(!pq.empty())
        {
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            // go in the adjacency list of that node
            for( auto x: adj[node])
            {
                //  now x is [1,1]  or  [weight,adjacent_node]
                int edgeWeight = x[1];
                int adjNode = x[0];
                
                if(dis+edgeWeight < distance[adjNode]){
                    distance[adjNode] = dis+edgeWeight;
                    pq.push({distance[adjNode],adjNode});
                }
                
            }
            
        }
        
        return distance;
    }
