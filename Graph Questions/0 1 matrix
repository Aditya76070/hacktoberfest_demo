class Solution {
public:
    
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        
        // here we use BFS only because we want to find the minimum distance from the source 
        // that we go to nearest level simultaneously in all 4 directions
        int n = mat.size();
        int m = mat[0].size();
        
        vector<vector<int>> ans(n,vector<int>(m,0));
        vector<vector<int>> visited(n,vector<int>(m,0));
        queue<pair<pair<int,int>,int>> q;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]==0)
                {
                    visited[i][j]=1;
                    q.push({{i,j},0});
                }                
            }
        }
        
        while(!q.empty())
        {
            auto p = q.front();
            int r = p.first.first;
            int c = p.first.second;
            int step = p.second;
            q.pop();
            
            ans[r][c]=step;
            
            //check in all 4 directions
            vector<int> delta = {0,1,0,-1,0}; 
            
            for(int k=0;k<4;k++)
            {
                int nrow = r+delta[k];
                int ncol = c+delta[k+1];
                
                if(nrow>=0 && ncol>=0 && nrow<n && ncol < m && visited[nrow][ncol]==0)
                {
                    visited[nrow][ncol]=1;
                    q.push({{nrow,ncol},step+1});
                }
            }
        }
        
        return ans;
    }
};
